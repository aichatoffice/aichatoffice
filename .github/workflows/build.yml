name: Build AIChatOffice

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  # 允许手动触发工作流
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write
  packages: write
  issues: write

env:
  repo_name: "aichatoffice"
  repo_owner: "aichatoffice"
  package_json: "app/package.json"

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_version: ${{ steps.release_info.outputs.release_version }}
      version: ${{ steps.version.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from package.json
        uses: sergeysova/jq-action@v2
        id: version
        with:
          cmd: 'jq .version ${{ env.package_json }} -r'

      - name: Gather Release Information
        id: release_info
        run: |
            echo "release_title=$(git show --format=%s --no-patch | head -1)" >> $GITHUB_OUTPUT
            echo "release_version=$(TZ=Asia/Shanghai date +'v%Y%m%d%H%M')" >> $GITHUB_OUTPUT
               EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
            echo "release_body=自动构建发布 $(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          name: 'aichatoffice ${{ steps.release_info.outputs.release_version }}'
          tag: 'aichatoffice-${{ steps.release_info.outputs.release_version }}'
          draft: false
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build (${{ matrix.config.os }})
    runs-on: ${{ matrix.config.os }}
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: macos-latest
            name: macOS Build (x64)
            electron_args: "electron:build:mac-x64"
            artifact_path: "app/dist_electron/*.dmg"
            suffix: "x64.dmg"
            
          - os: macos-latest
            name: macOS Build (arm64)
            electron_args: "electron:build:mac-arm64"
            artifact_path: "app/dist_electron/*.dmg"
            suffix: "arm64.dmg"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: './app/package-lock.json'

      - name: Install dependencies
        run: |
          npm install
        working-directory: ./app

      - name: Build application
        run: npm run ${{ matrix.config.electron_args }}
        working-directory: ./app

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.config.name }}
          path: ${{ matrix.config.artifact_path }}

      - name: Debug Release Info
        run: |
          echo "Debug Release Info:"
          echo "upload_url  : ${{ needs.create_release.outputs.upload_url }}"
          echo "asset_name: aichatoffice-${{ needs.create_release.outputs.version }}-${{ matrix.config.suffix }}"
          echo "asset_path: ${{ github.workspace }}/app/dist_electron/AIChatOffice-${{ needs.create_release.outputs.version }}-${{ matrix.config.suffix }}"
          ls -la ${{ github.workspace }}/app/dist_electron/

      - name: Upload Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: aichatoffice-${{ needs.create_release.outputs.version }}-${{ matrix.config.suffix }}
          asset_path: ${{ github.workspace }}/app/dist_electron/AIChatOffice-${{ needs.create_release.outputs.version }}-${{ matrix.config.suffix }}
          asset_content_type: application/octet-stream