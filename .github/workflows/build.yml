name: Build AIChatOffice

on:
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  # 允许手动触发工作流
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write
  packages: write
  issues: write

env:
  repo_name: "aichatoffice"
  repo_owner: "aichatoffice"
  package_json: "app/package.json"

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_version: ${{ steps.release_info.outputs.release_version }}
      version: ${{ steps.version.outputs.value }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from package.json
        uses: sergeysova/jq-action@v2
        id: version
        with:
          cmd: 'jq .version ${{ env.package_json }} -r'

      - name: Gather Release Information
        id: release_info
        run: |
            echo "release_title=$(git show --format=%s --no-patch | head -1)" >> $GITHUB_OUTPUT
            echo "release_version=$(TZ=Asia/Shanghai date +'v%Y%m%d%H%M')" >> $GITHUB_OUTPUT
            echo "release_body=自动构建发布 $(date +'%Y-%m-%d %H:%M:%S')" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          name: 'aichatoffice ${{ steps.release_info.outputs.release_version }}'
          tag: 'aichatoffice-${{ steps.release_info.outputs.release_version }}'
          draft: false
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}

  build:
    name: Build (${{ matrix.config.name }})
    runs-on: ${{ matrix.config.os }}
    needs: create_release
    strategy:
      fail-fast: false
      matrix:
        config:
          - os: macos-latest
            name: macOS Build (x64)
            electron_args: "electron:build:mac-x64"
            go_args: "build-darwin-x64"
            artifact_path: "app/dist_electron/*-x64.dmg"
            suffix: "x64.dmg"
            
          - os: macos-latest
            name: macOS Build (arm64)
            electron_args: "electron:build:mac-arm64"
            go_args: "build-darwin-arm64"
            artifact_path: "app/dist_electron/*-arm64.dmg"
            suffix: "arm64.dmg"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          cache-dependency-path: './app/package-lock.json'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'
          cache: true
          cache-dependency-path: ./aichatoffice/go.sum

      - name: Clean previous build
        run: make clean
        working-directory: ./aichatoffice

      - name: Build Go Program
        run: make ${{ matrix.config.go_args }}
        working-directory: ./aichatoffice
        env:
          GOPROXY: https://proxy.golang.org,direct
          GO111MODULE: on

      - name: Install dependencies
        run: |
          npm install
        working-directory: ./app

      - name: Install Apple Developer Certificate
        if: matrix.config.os == 'macos-latest'
        env:
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          if [ -n "$APPLE_CERTIFICATE" ]; then
            echo $APPLE_CERTIFICATE | base64 --decode > certificate.p12
            security create-keychain -p actions build.keychain
            security default-keychain -s build.keychain
            security unlock-keychain -p actions build.keychain
            security import certificate.p12 -k build.keychain -P $APPLE_CERTIFICATE_PASSWORD -T /usr/bin/codesign
            security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k actions build.keychain
          fi

      - name: Build application
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          CSC_NAME: "Developer ID Application: Your Name (${{ secrets.APPLE_TEAM_ID }})"
          CSC_LINK: ${{ secrets.APPLE_CERTIFICATE }}
          CSC_KEY_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: npm run ${{ matrix.config.electron_args }}
        working-directory: ./app

      - name: Notarize app
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_ID_PASSWORD: ${{ secrets.APPLE_ID_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          echo "开始公证过程..."
          xcrun notarytool submit "${{ github.workspace }}/app/dist_electron/AIChatOffice-${{ needs.create_release.outputs.version }}-${{ matrix.config.suffix }}" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_ID_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait || {
              echo "公证失败，获取详细信息..."
              xcrun notarytool log $(xcrun notarytool submit "${{ github.workspace }}/app/dist_electron/AIChatOffice-${{ needs.create_release.outputs.version }}-${{ matrix.config.suffix }}" \
                --apple-id "$APPLE_ID" \
                --password "$APPLE_ID_PASSWORD" \
                --team-id "$APPLE_TEAM_ID" | grep "id:" | cut -d' ' -f2) \
                --apple-id "$APPLE_ID" \
                --password "$APPLE_ID_PASSWORD" \
                --team-id "$APPLE_TEAM_ID"
              exit 1
            }

      - name: Debug Release Info
        run: |
          echo "Debug Release Info:"
          echo "upload_url  : ${{ needs.create_release.outputs.upload_url }}"
          echo "asset_name: aichatoffice-${{ needs.create_release.outputs.version }}-${{ matrix.config.suffix }}"
          echo "asset_path: ${{ github.workspace }}/app/dist_electron/AIChatOffice-${{ needs.create_release.outputs.version }}-${{ matrix.config.suffix }}"
          ls -la ${{ github.workspace }}/app/dist_electron/

      - name: Upload Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_name: aichatoffice-${{ needs.create_release.outputs.version }}-${{ matrix.config.suffix }}
          asset_path: ${{ github.workspace }}/app/dist_electron/AIChatOffice-${{ needs.create_release.outputs.version }}-${{ matrix.config.suffix }}
          asset_content_type: application/octet-stream